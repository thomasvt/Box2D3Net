using System.Text;
using Box2dNetGen.Generators;

namespace Box2dNetGen
{
    internal class CsGenerator
    {
        private readonly string _extraUsings;
        private readonly Func<string, bool> _shouldGenerateInitCtor;
        private readonly Dictionary<string, string> _structTypeReplacer;
        private TypeMapper? _typeMapper;
        private GeneratorUtils? _utils;

        public CsGenerator(string extraUsings, Dictionary<string, string> structTypeReplacer, Func<string, bool> shouldGenerateInitCtor)
        {
            _extraUsings = extraUsings;
            _structTypeReplacer = structTypeReplacer;
            _shouldGenerateInitCtor = shouldGenerateInitCtor;
        }

        /// <summary>
        /// Generates the entire Box2D native wrapper.
        /// </summary>
        public string GenerateCsCode(List<ApiConstant> constants, List<ApiStruct> structs, List<ApiDelegate> delegates, List<ApiFunction> functions,
            List<ApiEnum> enums, HashSet<string> excludedTypes)
        {
            Initialize(structs, delegates, enums, excludedTypes);

            var sb = new StringBuilder();
            AppendFileHeader(sb);

            sb.AppendLine(_extraUsings);

            AppendStartOfNamespace(sb);

            var enumCount = new EnumsGenerator().GenerateEnums(enums, sb);
            var delegateCount = new DelegatesGenerator(_typeMapper!, _utils!).GenerateDelegates(delegates, sb);
            var structCount = new StructsGenerator(_typeMapper!, _shouldGenerateInitCtor).GenerateStructs(structs, constants, sb);

            AppendStartOfB2ApiClass(sb);

            var constantCount = new ConstantsGenerator().GenerateConstants(constants, sb);
            var functionCount = new FunctionsGenerator(_typeMapper!).GenerateFunctions(functions, sb);

            AppendEndOfB2ApiClassAndNamespace(sb);

            LogStats(enumCount, delegateCount, structCount, constantCount, functionCount);

            return sb.ToString();
        }

        private void Initialize(List<ApiStruct> structs, List<ApiDelegate> delegates, List<ApiEnum> enums, HashSet<string> excludedTypes)
        {
            _typeMapper = new TypeMapper(_structTypeReplacer,
                structs.ToDictionary(s => s.Identifier),
                enums.ToDictionary(e => e.Identifier),
                delegates.ToDictionary(d => d.Identifier),
                excludedTypes);

            _utils = new GeneratorUtils(_typeMapper);
        }

        private static void AppendFileHeader(StringBuilder sb)
        {
            sb.AppendLine($"// Generated by Box2dNetGen for Box2D v3 on {DateTime.Now:G}");
            sb.Append(@"
using System.Runtime.InteropServices;
");
        }

        private static void AppendStartOfNamespace(StringBuilder sb)
        {
            sb.Append(@"
// ReSharper disable InconsistentNaming

namespace Box2dNet.Interop
{
");
        }

        private static void AppendStartOfB2ApiClass(StringBuilder sb)
        {
            sb.Append(@"
/// <summary>
/// The (more or less) full Box2D v3.x API as PInvoke functions. (functions marked with C macro 'B2_API' in original sources)
/// </summary>
public static partial class B2Api
    {
#if DEBUG
        private const string Box2DLibrary = ""box2dd.dll"";
#else
        private const string Box2DLibrary = ""box2d.dll"";
#endif
");
        }

        private static void AppendEndOfB2ApiClassAndNamespace(StringBuilder sb)
        {
            sb.Append(@"
    }
}
");
        }

        private static void LogStats(int enumCount, int delegateCount, int structCount, int constantCount, int functionCount)
        {
            Console.WriteLine("Generated:");
            Console.WriteLine($"{enumCount} enums");
            Console.WriteLine($"{delegateCount} delegates");
            Console.WriteLine($"{structCount} structs");
            Console.WriteLine($"{constantCount} constants");
            Console.WriteLine($"{functionCount} functions");
        }
    }
}
